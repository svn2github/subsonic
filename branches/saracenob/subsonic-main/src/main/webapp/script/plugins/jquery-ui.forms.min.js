(function($) {
    /*
    Validation Singleton
    */
    var Validation = function() {
        var rules = {
            required : {
               check: function(value) {
                   if(value)
                       return true;
                   else
                       return false;
               },
               msg : "<fmt:message key='login.error.required'/>"
            },
            email : {
               check: function(value) {
                   if(value)
                       return testPattern(value,"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])");
                   return true;
               },
               msg : "<fmt:message key='login.email.error.noemail'/>"
            },
            url : {
               check : function(value) {
                   if(value)
                       return testPattern(value,"^https?://(.+\.)+.{2,4}(/.*)?$");
                       //"^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$"
                   return true;
               },
               msg : "<fmt:message key='error.badurl'/>"
            },
            path : {
               check : function(value) {
                   if(value)
                       return testPattern(value,"^(.*?/|.*?\\\\)?([^\\./|^\\.\\\\]+)(?:\\.([^\\\\]*)|)$");
                       //^(.*?/|.*?\\)?([^\./|^\.\\]+)(?:\.([^\\]*)|)$
                   return true;
               },
               msg : "<fmt:message key='error.badpath'/>"
            },
            winpath : {
               check : function(value) {
                   if(value)
                       return testPattern(value,"^(?:[\\w]\\:|\\\\)(\\\\[a-zA-Z_\\-\\s0-9\\.]+)+\\.(zip|mp3|ogg|aac|mp4|txt|png|jpg|bmp|gif|pdf|doc|docx|xls|xlsx)$");
                   return true;
               },
               msg : "<fmt:message key='error.badpath'/>"
            },
            unixpath : {
               check : function(value) {
                   if(value)
                       return testPattern(value,"^(?\/)(\/[a-zA-Z_\\-\\s0-9\\.]+)+\\.(zip|mp3|ogg|aac|mp4|txt|png|jpg|bmp|gif|pdf|doc|docx|xls|xlsx)$");
                   return true;
               },
               msg : "<fmt:message key='error.badpath'/>"
            }
        }

        var testPattern = function(value, pattern) {
            var regExp = new RegExp(pattern,"");
            return regExp.test(value);
        }

        return {
            addRule : function(name, rule) {
                rules[name] = rule;
            },
            getRule : function(name) {
                return rules[name];
            }
        }
    }
    
    /* 
    Form factory 
    */
    var Form = function(form) {
        var fields = [];
        form.find("[validation]").each(function() {
            var field = $(this);
            if(typeof(field.attr('validation')) !== "undefined") {
                fields.push(new Field(field));
            }
        });
        this.fields = fields;
    }

    Form.prototype = {
        validate : function() {
            for(field in this.fields) {
                this.fields[field].validate();
            }
        },
        isValid : function() {
            for(field in this.fields) {
                if(!this.fields[field].valid) {
                    this.fields[field].field.focus();
                    return false;
                }
            }
            return true;
        }
    }
    
    /* 
    Field factory 
    */
    var Field = function(field) {
        this.field = field;
        this.valid = false;
        this.attach("change");
    }

    Field.prototype = {
        attach : function(event) {
            var obj = this;
            if(event == "change") {
                obj.field.bind("change",function() {
                    return obj.validate();
                });
            }
            if(event == "keyup") {
                obj.field.bind("keyup",function(e) {
                    return obj.validate();
                });
            }
        },
        validate : function() {
            var obj = this,
                field = obj.field,
                errorClass = "errorList",
                container = field.parent(),
                inputicon = field.next("span"),
                types = field.attr("validation").split(" "),
                errors = [];

            errorid = (typeof(field.attr("id")) == "undefined") ? field.attr("name") : field.attr("id");
            erroricon = $("#error_" + errorid, container);
            container.removeClass("ui-state-error");
            erroricon.remove();

            for (var type in types) {
                var rule = $.Validation.getRule(types[type]);
                if (!rule.check(field.val())) {
                    if (!container.hasClass("ui-state-error")) {
                        container.addClass("ui-state-error");
                    }
                    errors.push(rule.msg);
                    //debug.log(rule.msg);
                }
            }

            if (errors.length) {
                field.unbind("keyup")
                obj.attach("keyup");
                //container.after(errorfield.empty());
                for (error in errors) {
                    //errorfield.html(errorfield.html() + " " + errors[error]);
                }
                container.prepend('<span id="error_' + errorid + '" class="ui-icon ui-icon-notice iconError right" style="margin:4px 2px 0 0;"></span>');
                obj.valid = false;
            } else {
                obj.valid = true;
            }
        }
    }
    
    /*
    Validation extends jQuery prototype
    */
    $.extend($.fn, {
        validation : function() {
            var validator = new Form($(this));
            $.data($(this)[0], "validator", validator);
            
            $(this).bind("submit", function(e) {
                validator.validate();
                if(!validator.isValid()) {
                    e.preventDefault();
                }
            });
            $(this).bind("reset", function(e) {
                $(".iconError", $(this)).each(function() {
                    $(this).remove();
                });
                $(".ui-state-error", $(this)).each(function() {
                    $(this).removeClass("ui-state-error")
                });
            });
            return $(this);
        },
        validate : function() {
            var validator = $.data($(this)[0], "validator");
            validator.validate();
            return validator.isValid();
        },
        stylize : function() {
            $(":input, .inputPlain, .inputWithIcon", $(this)).each(function(index){
                var classPrefix = $(this).hasClass("inputWithIcon") ? "icon" : "plain";
                var classSuffix;
                switch(this.type) {
                    case "hidden": return;
                    case "select-one": case "select-multi": classSuffix = "Select"; break;
                    case "text": case "password": case "email": case "textarea": classSuffix = "Input"; break;
                    case "checkbox": classSuffix = "Checkbox"; break;
                    case "submit": case "reset": classSuffix = "Button"; break;
                    case "file": classSuffix = "File"; break;
                    //case "radio":
                    default: classSuffix = this.tagName.substr(0,1) + this.tagName.substr(1).toLowerCase(); break;
                }
                var wrapperClass =  classPrefix + classSuffix;
                switch (classSuffix) {
                    case "Checkbox":
                        var iconUnchecked;
                        if (typeof($(this).attr("id")) == "undefined") {
                            $(this).attr("id",  $(this).attr("name") + "_[" + index + "]");
                        }
                        var label = $("label[for='" + $(this).attr("id") + "']");
                        if (label.length == 0) {
                            $(this).parent().append("<label for=\"" + $(this).attr("id") + "\" class=\"" + wrapperClass + "\"></label>");
                            label = $("label[for='" + $(this).attr("id") + "']");
                        } else {
                            iconUnchecked = "ui-icon-close";
                        }
                        $(this).button({ icons: { primary: $(this).is(":checked") ? 'ui-icon-check' : iconUnchecked } }).change(function() {
                            $(this).button("option", {
                                icons: { primary: $(this).is(":checked") ? 'ui-icon-check' : iconUnchecked }
                            });
                            if ($(".ui-button-text", label).html().length == 0) {
                                $(".ui-icon", label).css({ "left" : "0" });
                            }
                        });
                        if ($(".ui-button-text", label).html().length == 0) {
                            $(".ui-icon", label).css({ "left" : "0" });
                            label.css({ "height" : "16px", "width" : "16px" });
                        }
                        break;

                    case "Button":
                        var iconType = null;
                        var iconPosition = null;
                        switch ($(this).attr("type")) {
                            case "submit": iconType = "ui-icon-triangle-1-e"; iconPosition = "secondary"; break;
                            case "reset": iconType = "ui-icon-close"; iconPosition = "primary"; break;
                        }
                        if ($(this).attr("class") != null && $(this).attr("class").indexOf("ui-icon-") != -1) {
                            var thisClasses = $(this).attr("class").split(" ");
                            $(thisClasses).each(function() {
                                if (this.indexOf("ui-icon-") != -1) {
                                    if (this.indexOf("ui-icon-primary") != -1 || this.indexOf("ui-icon-secondary") != -1 ) {
                                        iconPosition = this.indexOf("ui-icon-primary") != -1 ? "primary" : "secondary";
                                    } else {
                                        iconType = this;
                                    }
                                }
                            });
                        }
                        switch (iconPosition) {
                            case "primary": $(this).button({ icons: { primary : iconType } }); break;
                            case "secondary": $(this).button({ icons: { secondary : iconType } }); break;
                            default: $(this).button(); break;
                        }
                        break;
                    
                    case "File":
                        $(this).css({ "position" : "absolute", "top" : "0", "left" : "0", "opacity" : "0", "z-index" : "1" });
                        $(this).change(function() {
                            $(".filename", $(this).parent()).remove();
                            $(this).parent().append("<span class=\"filename\">"+ $(this).val() + "</span>");
                            $(".filename", $(this).parent()).css({ "position" : "absolute", "top" : "4px", "left" : "2px", "font-size" : "1em", "text-align" : "left" });
                        });

                    default:
                        if (classPrefix == "icon") {
                            if ($(this).next("span").hasClass("right")) {
                                $(this).next("span").css({ "margin-top" : "4px", "margin-right" : "2px" });
                            } else if ($(this).next("span").hasClass("left")) {
                                $(this).next("span").css({ "margin-top" : "4px", "margin-left" : "2px" });
                            }
                            $(this).add($(this).next()).wrapAll('<div class="' + wrapperClass + ' ui-widget-content ui-corner-all ui-state-default" style="display:inline-block;"></div>');
                        } else {
                            $(this).wrapAll('<div class="' + wrapperClass + ' ui-widget-content ui-corner-all ui-state-default" style="display:inline-block;"></div>');
                        }
                        $(this).hover(function() {
                            $(this).parent().addClass("ui-state-hover");
                        },function() {
                            $(this).parent().removeClass("ui-state-hover");
                        });
                        $(this).focus(function() {
                            $(this).parent().addClass("ui-state-active");
                        });
                        $(this).blur(function() {
                            $(this).parent().removeClass("ui-state-active");
                        });
                }
                if (classSuffix != "Input") {
                    $(this).css({ "cursor" : "pointer"})
                    $("." + wrapperClass).css({ "cursor" : "pointer"})
                    if (classSuffix == "File") $("." + wrapperClass).css({ "position" : "relative"})
                }
            });
            
            return $(this);
        }
    });
    $.Validation = new Validation();
})(jQuery);